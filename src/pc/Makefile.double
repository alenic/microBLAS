# Source-double Makefile for microBLAS

include ../../make.inc

# ------ Variables -------
# Relative root path
BUILD_TYPE=double
MBLAS_ROOT_PATH=../..
LOCAL_INCLUDE_FILES = $(MBLAS_ROOT_PATH)/include/dmicroBLAS.h

LIB_OBJECTS=darray.o dzeros.o dset.o dcopy.o

LIB_A_TARGET = libdmicroBLAS.a
LIB_SO_TARGET = libdmicroBLAS.so.1

# Includes
LOCAL_INCLUDE_PATH = $(MBLAS_ROOT_PATH)/include
L_HEADERS = $(addprefix -I,$(LOCAL_INCLUDE_PATH))

# Libraries and objects
LOCAL_OBJROOT_PATH=$(MBLAS_ROOT_PATH)/obj/pc
LOCAL_OBJ_PATH=$(LOCAL_OBJROOT_PATH)/$(BUILD_TYPE)
LOCAL_LIB_PATH=$(MBLAS_ROOT_PATH)/lib/pc
L_LIBFLAGS=-L$(LOCAL_LIB_PATH)
LOCAL_OBJECT_FILES=$(addprefix $(LOCAL_OBJ_PATH)/,$(LIB_OBJECTS))

all: dir lib_a lib_so

dir:
	(test -d $(LOCAL_LIB_PATH) || mkdir -p $(LOCAL_LIB_PATH))
	(test -d $(LOCAL_OBJ_PATH) || mkdir -p $(LOCAL_OBJ_PATH))

$(LOCAL_OBJ_PATH)/%.o: $(BUILD_TYPE)/%.c $(LOCAL_INCLUDE_FILES)
	$(CC) $(CFLAGS) $(L_HEADERS) -o $@ -c $<

lib_a: $(LOCAL_LIB_PATH)/$(LIB_A_TARGET)

lib_so: $(LOCAL_LIB_PATH)/$(LIB_SO_TARGET)

# Build static library
$(LOCAL_LIB_PATH)/$(LIB_A_TARGET): $(addprefix $(LOCAL_OBJ_PATH)/,$(LIB_OBJECTS))
	rm -f $(LOCAL_LIB_PATH)/$(LIB_A_TARGET)
	ar -rv $(LOCAL_LIB_PATH)/$(LIB_A_TARGET) $(LOCAL_OBJECT_FILES)
	ranlib $(LOCAL_LIB_PATH)/$(LIB_A_TARGET)
	@echo "****************** $(LIB_A_TARGET) Done ******************"

# Build dynamic library
$(LOCAL_LIB_PATH)/$(LIB_SO_TARGET): $(LOCAL_OBJECT_FILES)
	$(CC) -rdynamic -shared $(L_LIBFLAGS) -Wl,-soname,$(LIB_SO_TARGET).$(LIB_VERSION) -o $(LOCAL_LIB_PATH)/$(LIB_SO_TARGET) $(addprefix $(LOCAL_OBJ_PATH)/,$(LIB_OBJECTS))
	@echo "****************** $(LIB_SO_TARGET) Done ******************"

# Clean
clean:
ifneq ($(LOCAL_OBJROOT_PATH),/)
	(test -d $(LOCAL_OBJROOT_PATH) && rm -fr $(LOCAL_OBJROOT_PATH) || true)
endif
ifneq ($(LOCAL_LIB_PATH),/)
	(test -d $(LOCAL_LIB_PATH) && rm -fr $(LOCAL_LIB_PATH) || true)
endif
	@echo "****************** Clean Done ******************"

.PHONY: clean

